function UnitTest(){	//Parts}//Test allUnitTest.prototype.testAll = function UnitTest_testAll(){	this.testConceptNameMapper();	this.testConnectionManager();	alert("Unit tests completed");}//Test concept name mapperUnitTest.prototype.testConceptNameMapper = function UnitTest_testConceptNameMapper(){	var conceptNameMapper = new ConceptNameMapper();		if (conceptNameMapper.getConcept("apple") != conceptNameMapper.getConcept("Apple"))	{		throw "Both concept should be equivalent";	}		if (conceptNameMapper.getConcept("apple") == conceptNameMapper.getConcept("orangle"))	{		throw "Both concept shouldn't be equivalent";	}		conceptNameMapper.alias("ciRcle", "rouNd");		if (conceptNameMapper.getConcept("circle") != conceptNameMapper.getConcept("round"))	{		throw "Both concept should be equivalent";	}		conceptNameMapper.unAlias("ciRcle", "rouNd");		if (conceptNameMapper.getConcept("circle") == conceptNameMapper.getConcept("round"))	{		throw "Both concept shouldn't be equivalent";	}}//Test concept name mapperUnitTest.prototype.testConnectionManager = function UnitTest_testConnectionManager(){	var connectionManager = new ConnectionManager();	var conceptNameMapper = new ConceptNameMapper();		var pine = conceptNameMapper.getConcept("pine");	var tree = conceptNameMapper.getConcept("tree");	var plant = conceptNameMapper.getConcept("plant");	var animal = conceptNameMapper.getConcept("animal");		var isa = conceptNameMapper.getConcept("isa");		connectionManager.addConnection(pine, isa, tree);	connectionManager.addConnection(tree, isa, plant);			if (connectionManager.testConnection(pine, isa, animal))	{		throw "Connection shouldn't exist";	}	if (!connectionManager.testConnection(pine, isa, tree))	{		throw "Connection should exist";	}		if (!connectionManager.testConnection(tree, isa, plant))	{		throw "Connection should exist";	}		connectionManager.removeConnection(pine, isa, tree);		if (connectionManager.testConnection(pine, isa, tree))	{		throw "Connection shouldn't exist";	}}